// <auto-generated />
using System;
using EsportsPredictor.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EsportsPredictor.Migrations
{
    [DbContext(typeof(EsportsPredictorContext))]
    [Migration("20231115222818_winnersTable")]
    partial class winnersTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EsportsPredictor.Models.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Begin_at")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("begin_at");

                    b.Property<DateTime?>("End_at")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_at");

                    b.Property<string>("Match_type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("match_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("slug");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<int?>("Winner_id")
                        .HasColumnType("integer")
                        .HasColumnName("winner_id");

                    b.Property<string>("Winner_type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("winner_type");

                    b.HasKey("Id")
                        .HasName("pk_match");

                    b.ToTable("match", (string)null);
                });

            modelBuilder.Entity("EsportsPredictor.Models.Prediction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActualWinnerId")
                        .HasColumnType("integer")
                        .HasColumnName("actual_winner_id");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_completed");

                    b.Property<int>("MatchId")
                        .HasColumnType("integer")
                        .HasColumnName("match_id");

                    b.Property<int>("PredictedWinnerId")
                        .HasColumnType("integer")
                        .HasColumnName("predicted_winner_id");

                    b.HasKey("Id")
                        .HasName("pk_predictions");

                    b.HasIndex("ActualWinnerId")
                        .HasDatabaseName("ix_predictions_actual_winner_id");

                    b.HasIndex("MatchId")
                        .HasDatabaseName("ix_predictions_match_id");

                    b.HasIndex("PredictedWinnerId")
                        .HasDatabaseName("ix_predictions_predicted_winner_id");

                    b.ToTable("predictions", (string)null);
                });

            modelBuilder.Entity("EsportsPredictor.Models.Winner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DetailsPageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("details_page_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_winners");

                    b.ToTable("winners", (string)null);
                });

            modelBuilder.Entity("EsportsPredictor.Models.Prediction", b =>
                {
                    b.HasOne("EsportsPredictor.Models.Winner", "ActualWinner")
                        .WithMany()
                        .HasForeignKey("ActualWinnerId")
                        .HasConstraintName("fk_predictions_winners_actual_winner_id");

                    b.HasOne("EsportsPredictor.Models.Match", "Match")
                        .WithMany()
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_predictions_match_match_id");

                    b.HasOne("EsportsPredictor.Models.Winner", "PredictedWinner")
                        .WithMany()
                        .HasForeignKey("PredictedWinnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_predictions_winners_predicted_winner_id");

                    b.Navigation("ActualWinner");

                    b.Navigation("Match");

                    b.Navigation("PredictedWinner");
                });
#pragma warning restore 612, 618
        }
    }
}
